// @generated by protoc-gen-es v1.0.0
// @generated from file tendermint/consensus/types.proto (package tendermint.consensus, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message as Message$1, proto3 } from "@bufbuild/protobuf";
import type { BlockID, Part, PartSetHeader, Proposal as Proposal$1, SignedMsgType, Vote as Vote$1 } from "../types/types_pb.js";
import type { BitArray } from "../libs/bits/types_pb.js";

/**
 * NewRoundStep is sent for every step taken in the ConsensusState.
 * For every height/round/step transition
 *
 * @generated from message tendermint.consensus.NewRoundStep
 */
export declare class NewRoundStep extends Message$1<NewRoundStep> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: uint32 step = 3;
   */
  step: number;

  /**
   * @generated from field: int64 seconds_since_start_time = 4;
   */
  secondsSinceStartTime: bigint;

  /**
   * @generated from field: int32 last_commit_round = 5;
   */
  lastCommitRound: number;

  constructor(data?: PartialMessage<NewRoundStep>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.NewRoundStep";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewRoundStep;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewRoundStep;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewRoundStep;

  static equals(a: NewRoundStep | PlainMessage<NewRoundStep> | undefined, b: NewRoundStep | PlainMessage<NewRoundStep> | undefined): boolean;
}

/**
 * NewValidBlock is sent when a validator observes a valid block B in some round r,
 * i.e., there is a Proposal for block B and 2/3+ prevotes for the block B in the round r.
 * In case the block is also committed, then IsCommit flag is set to true.
 *
 * @generated from message tendermint.consensus.NewValidBlock
 */
export declare class NewValidBlock extends Message$1<NewValidBlock> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: tendermint.types.PartSetHeader block_part_set_header = 3;
   */
  blockPartSetHeader?: PartSetHeader;

  /**
   * @generated from field: tendermint.libs.bits.BitArray block_parts = 4;
   */
  blockParts?: BitArray;

  /**
   * @generated from field: bool is_commit = 5;
   */
  isCommit: boolean;

  constructor(data?: PartialMessage<NewValidBlock>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.NewValidBlock";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NewValidBlock;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NewValidBlock;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NewValidBlock;

  static equals(a: NewValidBlock | PlainMessage<NewValidBlock> | undefined, b: NewValidBlock | PlainMessage<NewValidBlock> | undefined): boolean;
}

/**
 * Proposal is sent when a new block is proposed.
 *
 * @generated from message tendermint.consensus.Proposal
 */
export declare class Proposal extends Message$1<Proposal> {
  /**
   * @generated from field: tendermint.types.Proposal proposal = 1;
   */
  proposal?: Proposal$1;

  constructor(data?: PartialMessage<Proposal>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.Proposal";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Proposal;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Proposal;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Proposal;

  static equals(a: Proposal | PlainMessage<Proposal> | undefined, b: Proposal | PlainMessage<Proposal> | undefined): boolean;
}

/**
 * ProposalPOL is sent when a previous proposal is re-proposed.
 *
 * @generated from message tendermint.consensus.ProposalPOL
 */
export declare class ProposalPOL extends Message$1<ProposalPOL> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 proposal_pol_round = 2;
   */
  proposalPolRound: number;

  /**
   * @generated from field: tendermint.libs.bits.BitArray proposal_pol = 3;
   */
  proposalPol?: BitArray;

  constructor(data?: PartialMessage<ProposalPOL>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.ProposalPOL";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProposalPOL;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProposalPOL;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProposalPOL;

  static equals(a: ProposalPOL | PlainMessage<ProposalPOL> | undefined, b: ProposalPOL | PlainMessage<ProposalPOL> | undefined): boolean;
}

/**
 * BlockPart is sent when gossipping a piece of the proposed block.
 *
 * @generated from message tendermint.consensus.BlockPart
 */
export declare class BlockPart extends Message$1<BlockPart> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: tendermint.types.Part part = 3;
   */
  part?: Part;

  constructor(data?: PartialMessage<BlockPart>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.BlockPart";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockPart;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockPart;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockPart;

  static equals(a: BlockPart | PlainMessage<BlockPart> | undefined, b: BlockPart | PlainMessage<BlockPart> | undefined): boolean;
}

/**
 * Vote is sent when voting for a proposal (or lack thereof).
 *
 * @generated from message tendermint.consensus.Vote
 */
export declare class Vote extends Message$1<Vote> {
  /**
   * @generated from field: tendermint.types.Vote vote = 1;
   */
  vote?: Vote$1;

  constructor(data?: PartialMessage<Vote>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.Vote";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vote;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vote;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vote;

  static equals(a: Vote | PlainMessage<Vote> | undefined, b: Vote | PlainMessage<Vote> | undefined): boolean;
}

/**
 * HasVote is sent to indicate that a particular vote has been received.
 *
 * @generated from message tendermint.consensus.HasVote
 */
export declare class HasVote extends Message$1<HasVote> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: tendermint.types.SignedMsgType type = 3;
   */
  type: SignedMsgType;

  /**
   * @generated from field: int32 index = 4;
   */
  index: number;

  constructor(data?: PartialMessage<HasVote>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.HasVote";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): HasVote;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): HasVote;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): HasVote;

  static equals(a: HasVote | PlainMessage<HasVote> | undefined, b: HasVote | PlainMessage<HasVote> | undefined): boolean;
}

/**
 * VoteSetMaj23 is sent to indicate that a given BlockID has seen +2/3 votes.
 *
 * @generated from message tendermint.consensus.VoteSetMaj23
 */
export declare class VoteSetMaj23 extends Message$1<VoteSetMaj23> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: tendermint.types.SignedMsgType type = 3;
   */
  type: SignedMsgType;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 4;
   */
  blockId?: BlockID;

  constructor(data?: PartialMessage<VoteSetMaj23>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.VoteSetMaj23";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteSetMaj23;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteSetMaj23;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteSetMaj23;

  static equals(a: VoteSetMaj23 | PlainMessage<VoteSetMaj23> | undefined, b: VoteSetMaj23 | PlainMessage<VoteSetMaj23> | undefined): boolean;
}

/**
 * VoteSetBits is sent to communicate the bit-array of votes seen for the BlockID.
 *
 * @generated from message tendermint.consensus.VoteSetBits
 */
export declare class VoteSetBits extends Message$1<VoteSetBits> {
  /**
   * @generated from field: int64 height = 1;
   */
  height: bigint;

  /**
   * @generated from field: int32 round = 2;
   */
  round: number;

  /**
   * @generated from field: tendermint.types.SignedMsgType type = 3;
   */
  type: SignedMsgType;

  /**
   * @generated from field: tendermint.types.BlockID block_id = 4;
   */
  blockId?: BlockID;

  /**
   * @generated from field: tendermint.libs.bits.BitArray votes = 5;
   */
  votes?: BitArray;

  constructor(data?: PartialMessage<VoteSetBits>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.VoteSetBits";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): VoteSetBits;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): VoteSetBits;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): VoteSetBits;

  static equals(a: VoteSetBits | PlainMessage<VoteSetBits> | undefined, b: VoteSetBits | PlainMessage<VoteSetBits> | undefined): boolean;
}

/**
 * @generated from message tendermint.consensus.Message
 */
export declare class Message extends Message$1<Message> {
  /**
   * @generated from oneof tendermint.consensus.Message.sum
   */
  sum: {
    /**
     * @generated from field: tendermint.consensus.NewRoundStep new_round_step = 1;
     */
    value: NewRoundStep;
    case: "newRoundStep";
  } | {
    /**
     * @generated from field: tendermint.consensus.NewValidBlock new_valid_block = 2;
     */
    value: NewValidBlock;
    case: "newValidBlock";
  } | {
    /**
     * @generated from field: tendermint.consensus.Proposal proposal = 3;
     */
    value: Proposal;
    case: "proposal";
  } | {
    /**
     * @generated from field: tendermint.consensus.ProposalPOL proposal_pol = 4;
     */
    value: ProposalPOL;
    case: "proposalPol";
  } | {
    /**
     * @generated from field: tendermint.consensus.BlockPart block_part = 5;
     */
    value: BlockPart;
    case: "blockPart";
  } | {
    /**
     * @generated from field: tendermint.consensus.Vote vote = 6;
     */
    value: Vote;
    case: "vote";
  } | {
    /**
     * @generated from field: tendermint.consensus.HasVote has_vote = 7;
     */
    value: HasVote;
    case: "hasVote";
  } | {
    /**
     * @generated from field: tendermint.consensus.VoteSetMaj23 vote_set_maj23 = 8;
     */
    value: VoteSetMaj23;
    case: "voteSetMaj23";
  } | {
    /**
     * @generated from field: tendermint.consensus.VoteSetBits vote_set_bits = 9;
     */
    value: VoteSetBits;
    case: "voteSetBits";
  } | { case: undefined; value?: undefined };

  constructor(data?: PartialMessage<Message>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "tendermint.consensus.Message";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Message;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Message;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Message;

  static equals(a: Message | PlainMessage<Message> | undefined, b: Message | PlainMessage<Message> | undefined): boolean;
}

